{"version":3,"file":"imageCoordinates.js","sourceRoot":"","sources":["../../../src/lib/imageCoordinates.ts"],"names":[],"mappings":";;;AAAA,mCAAsC;AACtC,6CAG4B;AAK5B,SAAS,iBAAiB,CACtB,SAA8B,EAC9B,UAA+B;IAE/B,OAAO;QACH,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9C,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;KACnD,CAAC;AACN,CAAC;AAED,SAAS,iBAAiB;IACtB,OAAO;QACH,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;KACP,CAAC;AACN,CAAC;AAED,SAAS,qBAAqB,CAC1B,gBAAuB,EACvB,cAAqB,EACrB,cAAqB;IAErB,OAAO;QACH,CAAC,EAAE,IAAA,aAAK,EAAC,gBAAgB,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;QAChE,CAAC,EAAE,IAAA,aAAK,EAAC,gBAAgB,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;KACnE,CAAC;AACN,CAAC;AAED,SAAS,gCAAgC,CACrC,QAAe,EACf,gBAAuB;IAEvB,OAAO;QACH,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC;QAClC,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC;KACrC,CAAC;AACN,CAAC;AAED,SAAgB,oCAAoC,CAChD,mBAAwC,EACxC,YAAmB,EACnB,cAAmC,EACnC,QAAe,EACf,KAA0B;IAE1B,MAAM,gBAAgB,GAAG,gCAAgC,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IAClF,MAAM,KAAK,GAAG,IAAA,sCAAyB,EAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAC/D,MAAM,WAAW,GAAG;QAChB,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClD,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KACrD,CAAC;IACF,MAAM,cAAc,GAAG,iBAAiB,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IAC9E,MAAM,cAAc,GAAG,iBAAiB,EAAE,CAAC;IAE3C,OAAO,qBAAqB,CAAC,WAAW,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;AAC9E,CAAC;AAjBD,oFAiBC;AAED,SAAgB,mCAAmC,CAC/C,mBAAwC,EACxC,cAAmC,EACnC,QAAe;IAEf,MAAM,cAAc,GAAG,iBAAiB,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IAC9E,MAAM,cAAc,GAAG,iBAAiB,EAAE,CAAC;IAC3C,MAAM,KAAK,GAAG,IAAA,qCAAwB,EAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IAC5E,MAAM,WAAW,GAAG;QAChB,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KAC7C,CAAC;IAEF,OAAO,qBAAqB,CAAC,WAAW,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;AAC9E,CAAC;AAdD,kFAcC","sourcesContent":["import { clamp } from 'src/lib/clamp';\nimport {\n    getContainerToImageRatio,\n    getSmallToLargeImageRatio,\n} from 'src/lib/imageRatio';\nimport type {\n    ContainerDimensions, Point,\n} from 'src/types';\n\nfunction getMinCoordinates(\n    container: ContainerDimensions,\n    largeImage: ContainerDimensions,\n): Point {\n    return {\n        x: ((largeImage.width - container.width) * -1),\n        y: ((largeImage.height - container.height) * -1),\n    };\n}\n\nfunction getMaxCoordinates(): Point {\n    return {\n        x: 0,\n        y: 0,\n    };\n}\n\nfunction clampImageCoordinates(\n    imageCoordinates: Point,\n    minCoordinates: Point,\n    maxCoordinates: Point,\n): Point {\n    return {\n        x: clamp(imageCoordinates.x, minCoordinates.x, maxCoordinates.x),\n        y: clamp(imageCoordinates.y, minCoordinates.y, maxCoordinates.y),\n    };\n}\n\nfunction getCursorPositionAdjustedForLens(\n    position: Point,\n    lensCursorOffset: Point,\n): Point {\n    return {\n        x: position.x - lensCursorOffset.x,\n        y: position.y - lensCursorOffset.y,\n    };\n}\n\nexport function getLensModeMagnifiedImageCoordinates(\n    containerDimensions: ContainerDimensions,\n    cursorOffset: Point,\n    magnifiedImage: ContainerDimensions,\n    position: Point,\n    image: ContainerDimensions,\n): Point {\n    const adjustedPosition = getCursorPositionAdjustedForLens(position, cursorOffset);\n    const ratio = getSmallToLargeImageRatio(image, magnifiedImage);\n    const coordinates = {\n        x: (Math.round(adjustedPosition.x * ratio.x) * -1),\n        y: (Math.round(adjustedPosition.y * ratio.y) * -1),\n    };\n    const minCoordinates = getMinCoordinates(containerDimensions, magnifiedImage);\n    const maxCoordinates = getMaxCoordinates();\n\n    return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\n\nexport function getInPlaceMagnifiedImageCoordinates(\n    containerDimensions: ContainerDimensions,\n    magnifiedImage: ContainerDimensions,\n    position: Point,\n): Point {\n    const minCoordinates = getMinCoordinates(containerDimensions, magnifiedImage);\n    const maxCoordinates = getMaxCoordinates();\n    const ratio = getContainerToImageRatio(containerDimensions, magnifiedImage);\n    const coordinates = {\n        x: (Math.round(position.x * ratio.x) * -1),\n        y: (Math.round(position.y * ratio.y) * -1),\n    };\n\n    return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);\n}\n"]}