{"version":3,"file":"lens.js","sourceRoot":"","sources":["../../../src/lib/lens.ts"],"names":[],"mappings":";;;AAAA,6CAA+D;AAG/D,SAAS,4BAA4B,CAAC,KAAa,EAAE,KAAa;IAC9D,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3C,CAAC;AAED,SAAgB,mBAAmB,CAC/B,UAA+B,EAC/B,UAA+B,EAC/B,gCAAqD;IAErD,MAAM,KAAK,GAAG,IAAA,sCAAyB,EAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAEhE,OAAO;QACH,CAAC,EAAE,4BAA4B,CAAC,gCAAgC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAChF,CAAC,EAAE,4BAA4B,CAAC,gCAAgC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;KACpF,CAAC;AACN,CAAC;AAXD,kDAWC","sourcesContent":["import { getLargeToSmallImageRatio } from 'src/lib/imageRatio';\nimport type { ContainerDimensions, Point } from 'src/types';\n\nfunction getLensCursorOffsetDimension(value: number, ratio: number): number {\n    return Math.round((value * ratio) / 2);\n}\n\nexport function getLensCursorOffset(\n    smallImage: ContainerDimensions,\n    largeImage: ContainerDimensions,\n    enlargedImageContainerDimensions: ContainerDimensions,\n): Point {\n    const ratio = getLargeToSmallImageRatio(smallImage, largeImage);\n\n    return {\n        x: getLensCursorOffsetDimension(enlargedImageContainerDimensions.width, ratio.x),\n        y: getLensCursorOffsetDimension(enlargedImageContainerDimensions.height, ratio.y),\n    };\n}\n"]}