{"version":3,"file":"PressActivation.js","sourceRoot":"","sources":["../../../src/lib/PressActivation.ts"],"names":[],"mappings":";;;AAAA,4CAAuD;AACvD,6EAAmH;AAQnH,MAAa,eAAgB,SAAQ,uDAA0B;IAK3D,YAAY,OAA+B;QACvC,KAAK,CAAC,EAAE,iBAAiB,EAAE,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACnD,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;IACzD,CAAC;IAED,YAAY,CAAC,KAAiB;QAC1B,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAED,UAAU,CAAC,KAAiB;QACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,OAAO;SACV;QAED,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,kBAAkB;QACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACb,IAAI,EAAE,kCAAsB;YAC5B,EAAE,EAAE,UAAU,CAAC,GAAG,EAAE;gBAChB,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,kBAAkB,EAAE;oBAC3E,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACnB;YACL,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC;SAC7B,CAAC,CAAC;IACP,CAAC;IAED,qBAAqB,CAAC,QAAe;QACjC,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC;IACnC,CAAC;IAED,sBAAsB,CAAC,QAAe;QAClC,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC;QAEvB,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;IAC5B,CAAC;CACJ;AA9CD,0CA8CC","sourcesContent":["import { PRESS_EVENT_TIMER_NAME } from 'src/constants';\nimport { TouchEnvironmentActivation, TouchEnvironmentActivationOptions } from 'src/lib/TouchEnvironmentActivation';\nimport type { Point, TouchEvent } from 'src/types';\n\nexport type PressActivationOptions = TouchEnvironmentActivationOptions & {\n    pressDurationInMs: number;\n    pressMoveThreshold: number;\n};\n\nexport class PressActivation extends TouchEnvironmentActivation {\n    pressDurationInMs: number;\n\n    pressMoveThreshold: number;\n\n    constructor(options: PressActivationOptions) {\n        super({ onIsActiveChanged: options.onIsActiveChanged });\n\n        this.pressDurationInMs = options.pressDurationInMs;\n        this.pressMoveThreshold = options.pressMoveThreshold;\n    }\n\n    touchStarted(event: TouchEvent): void {\n        this.initPressEventCriteria(event.position);\n        this.setPressEventTimer();\n    }\n\n    touchMoved(event: TouchEvent): void {\n        if (this.isActive) {\n            return;\n        }\n\n        this.setPressEventCriteria(event.position);\n    }\n\n    setPressEventTimer(): void {\n        this.timers.push({\n            name: PRESS_EVENT_TIMER_NAME,\n            id: setTimeout(() => {\n                if (Math.abs(this.currentElTop - this.initialElTop) < this.pressMoveThreshold) {\n                    this.activate();\n                }\n            }, this.pressDurationInMs),\n        });\n    }\n\n    setPressEventCriteria(position: Point): void {\n        this.currentElTop = position.y;\n    }\n\n    initPressEventCriteria(position: Point): void {\n        const top = position.y;\n\n        this.initialElTop = top;\n        this.currentElTop = top;\n    }\n}\n"]}