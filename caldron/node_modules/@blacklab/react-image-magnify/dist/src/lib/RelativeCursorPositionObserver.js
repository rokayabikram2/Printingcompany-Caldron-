"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelativeCursorPositionObserver = void 0;
class RelativeCursorPositionObserver {
    get subject() {
        return this._subject;
    }
    set subject(value) {
        this._subject = value;
    }
    get documentRelativeElementOffset() {
        if (!this._subject) {
            throw new Error('Not yet initialized. Subject is not set');
        }
        if (!this.elementOffset) {
            this.elementOffset = this.getDocumentRelativeElementOffset(this._subject);
        }
        return this.elementOffset;
    }
    getDocumentRelativeElementOffset(el) {
        const rootEl = this.getRootOfEl(el);
        const { left: docLeft, top: docTop, } = rootEl.getBoundingClientRect();
        const { left: elLeft, top: elTop, } = el.getBoundingClientRect();
        return {
            x: Math.abs(docLeft) + elLeft,
            y: Math.abs(docTop) + elTop,
        };
    }
    getRootOfEl(el) {
        if (el.parentElement) {
            return this.getRootOfEl(el.parentElement);
        }
        return el;
    }
    getComputedElementRelativeCursorPosition(event, documentRelativeElementOffset) {
        const position = this.getDocumentRelativeCursorPosition(event);
        const { x: cursorX, y: cursorY } = position;
        const { x: offsetX, y: offsetY } = documentRelativeElementOffset;
        return {
            x: Math.round(cursorX - offsetX),
            y: Math.round(cursorY - offsetY),
        };
    }
    getDocumentRelativeCursorPosition(event) {
        return {
            x: event.pageX,
            y: event.pageY,
        };
    }
    getCursorPosition(event) {
        return this.getComputedElementRelativeCursorPosition(event, this.documentRelativeElementOffset);
    }
}
exports.RelativeCursorPositionObserver = RelativeCursorPositionObserver;
//# sourceMappingURL=RelativeCursorPositionObserver.js.map