"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInPlaceMagnifiedImageCoordinates = exports.getLensModeMagnifiedImageCoordinates = void 0;
const clamp_1 = require("./clamp");
const imageRatio_1 = require("./imageRatio");
function getMinCoordinates(container, largeImage) {
    return {
        x: ((largeImage.width - container.width) * -1),
        y: ((largeImage.height - container.height) * -1),
    };
}
function getMaxCoordinates() {
    return {
        x: 0,
        y: 0,
    };
}
function clampImageCoordinates(imageCoordinates, minCoordinates, maxCoordinates) {
    return {
        x: (0, clamp_1.clamp)(imageCoordinates.x, minCoordinates.x, maxCoordinates.x),
        y: (0, clamp_1.clamp)(imageCoordinates.y, minCoordinates.y, maxCoordinates.y),
    };
}
function getCursorPositionAdjustedForLens(position, lensCursorOffset) {
    return {
        x: position.x - lensCursorOffset.x,
        y: position.y - lensCursorOffset.y,
    };
}
function getLensModeMagnifiedImageCoordinates(containerDimensions, cursorOffset, magnifiedImage, position, image) {
    const adjustedPosition = getCursorPositionAdjustedForLens(position, cursorOffset);
    const ratio = (0, imageRatio_1.getSmallToLargeImageRatio)(image, magnifiedImage);
    const coordinates = {
        x: (Math.round(adjustedPosition.x * ratio.x) * -1),
        y: (Math.round(adjustedPosition.y * ratio.y) * -1),
    };
    const minCoordinates = getMinCoordinates(containerDimensions, magnifiedImage);
    const maxCoordinates = getMaxCoordinates();
    return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);
}
exports.getLensModeMagnifiedImageCoordinates = getLensModeMagnifiedImageCoordinates;
function getInPlaceMagnifiedImageCoordinates(containerDimensions, magnifiedImage, position) {
    const minCoordinates = getMinCoordinates(containerDimensions, magnifiedImage);
    const maxCoordinates = getMaxCoordinates();
    const ratio = (0, imageRatio_1.getContainerToImageRatio)(containerDimensions, magnifiedImage);
    const coordinates = {
        x: (Math.round(position.x * ratio.x) * -1),
        y: (Math.round(position.y * ratio.y) * -1),
    };
    return clampImageCoordinates(coordinates, minCoordinates, maxCoordinates);
}
exports.getInPlaceMagnifiedImageCoordinates = getInPlaceMagnifiedImageCoordinates;
//# sourceMappingURL=imageCoordinates.js.map