{"version":3,"file":"TapActivation.js","sourceRoot":"","sources":["../../../src/lib/TapActivation.ts"],"names":[],"mappings":";;;AAAA,4CAAuD;AACvD,6EAAmH;AAQnH,MAAa,aAAc,SAAQ,uDAA0B;IAOzD,YAAY,OAA6B;QACrC,KAAK,CAAC,EAAE,iBAAiB,EAAE,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC/C,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;IACrD,CAAC;IAED,YAAY,CAAC,KAAiB;QAC1B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAED,UAAU,CAAC,KAAiB;QACxB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,OAAO;SACV;QAED,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;IAED,UAAU;QACN,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACnC,CAAC;IAED,IAAI,sBAAsB;QACtB,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC;IACnF,CAAC;IAED,IAAI,kBAAkB;QAClB,OAAO,CAAC,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,kBAAkB,CAAC;IACnE,CAAC;IAED,gBAAgB;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACb,IAAI,EAAE,kCAAsB;YAC5B,EAAE,EAAE,UAAU,CAAC,GAAG,EAAE;gBAChB,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBACzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;iBAC3B;YACL,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC;SAC3B,CAAC,CAAC;IACP,CAAC;IAED,wBAAwB,CAAC,QAAe;QACpC,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC;IACnC,CAAC;IAED,iBAAiB,CAAC,QAAe;QAC7B,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC;QAEvB,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;IAC5B,CAAC;CACJ;AA9DD,sCA8DC","sourcesContent":["import { TAP_GESTURE_TIMER_NAME } from 'src/constants';\nimport { TouchEnvironmentActivation, TouchEnvironmentActivationOptions } from 'src/lib/TouchEnvironmentActivation';\nimport type { Point, TouchEvent } from 'src/types';\n\nexport type TapActivationOptions = TouchEnvironmentActivationOptions & {\n    tapDurationInMs: number;\n    tapMoveThreshold: number;\n};\n\nexport class TapActivation extends TouchEnvironmentActivation {\n    hasTapGestureEnded: boolean;\n\n    tapDurationInMs: number;\n\n    tapMoveThreshold: number;\n\n    constructor(options: TapActivationOptions) {\n        super({ onIsActiveChanged: options.onIsActiveChanged });\n\n        this.hasTapGestureEnded = false;\n        this.tapDurationInMs = options.tapDurationInMs;\n        this.tapMoveThreshold = options.tapMoveThreshold;\n    }\n\n    touchStarted(event: TouchEvent): void {\n        this.hasTapGestureEnded = false;\n        this.initMoveThreshold(event.position);\n        this.setTapEventTimer();\n    }\n\n    touchMoved(event: TouchEvent): void {\n        if (this.isActive) {\n            return;\n        }\n\n        this.setMoveThresholdCriteria(event.position);\n    }\n\n    touchEnded(): void {\n        this.hasTapGestureEnded = true;\n    }\n\n    get hasPassedMoveThreshold(): boolean {\n        return Math.abs(this.currentElTop - this.initialElTop) > this.tapMoveThreshold;\n    }\n\n    get isTapGestureActive(): boolean {\n        return !this.hasPassedMoveThreshold && this.hasTapGestureEnded;\n    }\n\n    setTapEventTimer(): void {\n        this.timers.push({\n            name: TAP_GESTURE_TIMER_NAME,\n            id: setTimeout(() => {\n                if (this.isTapGestureActive) {\n                    this.toggleActivation();\n                }\n            }, this.tapDurationInMs),\n        });\n    }\n\n    setMoveThresholdCriteria(position: Point): void {\n        this.currentElTop = position.y;\n    }\n\n    initMoveThreshold(position: Point): void {\n        const top = position.y;\n\n        this.initialElTop = top;\n        this.currentElTop = top;\n    }\n}\n"]}