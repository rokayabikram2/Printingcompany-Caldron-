{"version":3,"file":"Activation.js","sourceRoot":"","sources":["../../../src/lib/Activation.ts"],"names":[],"mappings":";;;AAMA,MAAa,UAAU;IAOnB,YAAY,OAA0B;QAClC,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACnD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,iBAAiB,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,UAAU;QACN,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,iBAAiB,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAED,gBAAgB;QACZ,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;aAAM;YACH,IAAI,CAAC,QAAQ,EAAE,CAAC;SACnB;IACL,CAAC;IAED,WAAW;QACP,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAExB,OAAO,MAAM,CAAC,MAAM,EAAE;YAClB,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC;YAE3B,IAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,EAAE,EAAE;gBACX,mBAAmB;gBACnB,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aAC1B;SACJ;IACL,CAAC;IAED,UAAU,CAAC,SAAiB;QACxB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC1B,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC1B,mBAAmB;gBACnB,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aAC1B;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AArDD,gCAqDC","sourcesContent":["import type { OnIsActiveChangedHandler, TimerHandle } from 'src/types';\n\nexport type ActivationOptions = {\n    onIsActiveChanged: OnIsActiveChangedHandler;\n};\n\nexport class Activation {\n    isActive: boolean;\n\n    onIsActiveChanged: OnIsActiveChangedHandler;\n\n    timers: TimerHandle[];\n\n    constructor(options: ActivationOptions) {\n        this.onIsActiveChanged = options.onIsActiveChanged;\n        this.isActive = false;\n        this.timers = [];\n    }\n\n    activate(): void {\n        this.isActive = true;\n        this.onIsActiveChanged({ isActive: true });\n    }\n\n    deactivate(): void {\n        this.isActive = false;\n        this.onIsActiveChanged({ isActive: false });\n        this.clearTimers();\n    }\n\n    toggleActivation(): void {\n        if (this.isActive) {\n            this.deactivate();\n        } else {\n            this.activate();\n        }\n    }\n\n    clearTimers(): void {\n        const { timers } = this;\n\n        while (timers.length) {\n            const timer = timers.pop();\n\n            if (timer?.id) {\n                // @ts-expect-error\n                clearTimeout(timer.id);\n            }\n        }\n    }\n\n    clearTimer(timerName: string): void {\n        this.timers.forEach((timer) => {\n            if (timer.name === timerName) {\n                // @ts-expect-error\n                clearTimeout(timer.id);\n            }\n        });\n    }\n}\n"]}