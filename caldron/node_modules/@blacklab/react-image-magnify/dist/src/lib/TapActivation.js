"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TapActivation = void 0;
const constants_1 = require("../constants");
const TouchEnvironmentActivation_1 = require("./TouchEnvironmentActivation");
class TapActivation extends TouchEnvironmentActivation_1.TouchEnvironmentActivation {
    constructor(options) {
        super({ onIsActiveChanged: options.onIsActiveChanged });
        this.hasTapGestureEnded = false;
        this.tapDurationInMs = options.tapDurationInMs;
        this.tapMoveThreshold = options.tapMoveThreshold;
    }
    touchStarted(event) {
        this.hasTapGestureEnded = false;
        this.initMoveThreshold(event.position);
        this.setTapEventTimer();
    }
    touchMoved(event) {
        if (this.isActive) {
            return;
        }
        this.setMoveThresholdCriteria(event.position);
    }
    touchEnded() {
        this.hasTapGestureEnded = true;
    }
    get hasPassedMoveThreshold() {
        return Math.abs(this.currentElTop - this.initialElTop) > this.tapMoveThreshold;
    }
    get isTapGestureActive() {
        return !this.hasPassedMoveThreshold && this.hasTapGestureEnded;
    }
    setTapEventTimer() {
        this.timers.push({
            name: constants_1.TAP_GESTURE_TIMER_NAME,
            id: setTimeout(() => {
                if (this.isTapGestureActive) {
                    this.toggleActivation();
                }
            }, this.tapDurationInMs),
        });
    }
    setMoveThresholdCriteria(position) {
        this.currentElTop = position.y;
    }
    initMoveThreshold(position) {
        const top = position.y;
        this.initialElTop = top;
        this.currentElTop = top;
    }
}
exports.TapActivation = TapActivation;
//# sourceMappingURL=TapActivation.js.map