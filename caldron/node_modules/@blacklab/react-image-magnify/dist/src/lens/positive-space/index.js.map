{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/lens/positive-space/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAsC;AACtC,4EAAgF;AAEhF,iCAAqD;AAExC,QAAA,iBAAiB,GAAG,IAAA,kBAAU,EAA8B,CAAC,KAAK,EAAE,GAAG,EAAsB,EAAE;IACxG,MAAM,EACF,QAAQ,EACR,iBAAiB,EACjB,gBAAgB,EAChB,YAAY,EAAE,EACV,CAAC,EAAE,aAAa,EAChB,CAAC,EAAE,aAAa,GACnB,EACD,QAAQ,EAAE,EACN,CAAC,EAAE,SAAS,EACZ,CAAC,EAAE,SAAS,GACf,EACD,KAAK,EAAE,kBAAkB,KAEzB,KAAK,EADF,IAAI,UACP,KAAK,EAdH,0FAcL,CAAQ,CAAC;IACV,MAAM,QAAQ,GAAI,GAA0C,CAAC;IAE7D,IAAI,CAAC,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAA,EAAE;QACpB,OAAO,IAAI,CAAC;KACf;IAED,MAAM,YAAY,GAAG;QACjB,UAAU,EAAE,WAAW,gBAAgB,YAAY;QACnD,eAAe,EAAE,OAAO,gCAAO,GAAG;KACrC,CAAC;IAEF,MAAM,KAAK,GAAG,aAAa,GAAG,CAAC,CAAC;IAChC,MAAM,MAAM,GAAG,aAAa,GAAG,CAAC,CAAC;IACjC,MAAM,SAAS,GAAG,QAAQ,IAAI,CAAC,iBAAiB,CAAC;IACjD,MAAM,GAAG,GAAG,SAAS,GAAG,aAAa,CAAC;IACtC,MAAM,IAAI,GAAG,SAAS,GAAG,aAAa,CAAC;IACvC,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,GAAG,MAAM,CAAC;IACtD,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC;IACrD,MAAM,SAAS,GAAG,CAAC,CAAC;IAEpB,MAAM,aAAa,GAAG;QAClB,QAAQ,EAAE,UAAU;QACpB,GAAG,EAAE,GAAG,IAAA,aAAK,EAAC,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC,IAAI;QACzC,IAAI,EAAE,GAAG,IAAA,aAAK,EAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,IAAI;QAC5C,KAAK,EAAE,GAAG,KAAK,IAAI;QACnB,MAAM,EAAE,GAAG,MAAM,IAAI;QACrB,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACP,CAAC;IAExB,OAAO,CACH,8CACI,KAAK,gDACE,YAAY,GACZ,kBAAkB,GAClB,aAAa,KAEhB,IAAI,EACV,CACL,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,yBAAiB,CAAC,WAAW,GAAG,mBAAmB,CAAC","sourcesContent":["import { clamp } from 'src/lib/clamp';\nimport { dataUri } from 'src/lens/positive-space/assets/textured-lens-data-uri';\nimport type { LensProps } from 'src/types';\nimport { forwardRef, MutableRefObject } from 'react';\n\nexport const PositiveSpaceLens = forwardRef<HTMLImageElement, LensProps>((props, ref): JSX.Element | null => {\n    const {\n        isActive,\n        isPositionOutside,\n        fadeDurationInMs,\n        cursorOffset: {\n            x: cursorOffsetX,\n            y: cursorOffsetY,\n        },\n        position: {\n            x: positionX,\n            y: positionY,\n        },\n        style: userSpecifiedStyle,\n        ...rest\n    } = props;\n    const typedRef = (ref as MutableRefObject<HTMLImageElement>);\n\n    if (!typedRef?.current) {\n        return null;\n    }\n\n    const defaultStyle = {\n        transition: `opacity ${fadeDurationInMs}ms ease-in`,\n        backgroundImage: `url(${dataUri})`,\n    };\n\n    const width = cursorOffsetX * 2;\n    const height = cursorOffsetY * 2;\n    const isVisible = isActive && !isPositionOutside;\n    const top = positionY - cursorOffsetY;\n    const left = positionX - cursorOffsetX;\n    const maxTop = typedRef.current.offsetHeight - height;\n    const maxLeft = typedRef.current.offsetWidth - width;\n    const minOffset = 0;\n\n    const priorityStyle = {\n        position: 'absolute',\n        top: `${clamp(top, minOffset, maxTop)}px`,\n        left: `${clamp(left, minOffset, maxLeft)}px`,\n        width: `${width}px`,\n        height: `${height}px`,\n        opacity: isVisible ? 1 : 0,\n    } as LensProps['style'];\n\n    return (\n        <div\n            style={{\n                ...defaultStyle,\n                ...userSpecifiedStyle,\n                ...priorityStyle,\n            }}\n            {...rest}\n        />\n    );\n});\n\nPositiveSpaceLens.displayName = 'PositiveSpaceLens';\n"]}