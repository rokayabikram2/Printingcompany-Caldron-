"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PositiveSpaceLens = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const clamp_1 = require("../../lib/clamp");
const textured_lens_data_uri_1 = require("./assets/textured-lens-data-uri");
const react_1 = require("react");
exports.PositiveSpaceLens = (0, react_1.forwardRef)((props, ref) => {
    const { isActive, isPositionOutside, fadeDurationInMs, cursorOffset: { x: cursorOffsetX, y: cursorOffsetY, }, position: { x: positionX, y: positionY, }, style: userSpecifiedStyle } = props, rest = __rest(props, ["isActive", "isPositionOutside", "fadeDurationInMs", "cursorOffset", "position", "style"]);
    const typedRef = ref;
    if (!(typedRef === null || typedRef === void 0 ? void 0 : typedRef.current)) {
        return null;
    }
    const defaultStyle = {
        transition: `opacity ${fadeDurationInMs}ms ease-in`,
        backgroundImage: `url(${textured_lens_data_uri_1.dataUri})`,
    };
    const width = cursorOffsetX * 2;
    const height = cursorOffsetY * 2;
    const isVisible = isActive && !isPositionOutside;
    const top = positionY - cursorOffsetY;
    const left = positionX - cursorOffsetX;
    const maxTop = typedRef.current.offsetHeight - height;
    const maxLeft = typedRef.current.offsetWidth - width;
    const minOffset = 0;
    const priorityStyle = {
        position: 'absolute',
        top: `${(0, clamp_1.clamp)(top, minOffset, maxTop)}px`,
        left: `${(0, clamp_1.clamp)(left, minOffset, maxLeft)}px`,
        width: `${width}px`,
        height: `${height}px`,
        opacity: isVisible ? 1 : 0,
    };
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ style: Object.assign(Object.assign(Object.assign({}, defaultStyle), userSpecifiedStyle), priorityStyle) }, rest)));
});
exports.PositiveSpaceLens.displayName = 'PositiveSpaceLens';
//# sourceMappingURL=index.js.map