import { HTMLProps } from 'react';
import type { ActivationChangeEvent, ContainerDimensions, DetectedInputType, Interactions, Point, PositionChangeEvent } from "./types";
export declare type ChildProps = {
    isActive: boolean;
    isPositionOutside: boolean;
    elementDimensions: ContainerDimensions;
    position: Point;
};
export interface PropTypes extends HTMLProps<HTMLDivElement> {
    activationInteractionMouse: Interactions['click'] | Interactions['hover'];
    activationInteractionTouch: Interactions['press'] | Interactions['tap'] | Interactions['touch'];
    children: (props: ChildProps) => JSX.Element;
    hoverDelayInMs?: number;
    hoverOffDelayInMs?: number;
    isEnabled?: boolean;
    onActivationChanged?: (event: ActivationChangeEvent) => void;
    onDetectedEnvironmentChanged?: (detectedInputType: DetectedInputType) => void;
    onOutsideClick: (e: MouseEvent) => void;
    onPositionChanged?: (event: PositionChangeEvent) => void;
    pressDurationInMs?: number;
    pressMoveThreshold?: number;
    shouldStopTouchMovePropagation?: boolean;
    tabIndex?: number;
    tapDurationInMs?: number;
    tapMoveThreshold?: number;
    useCapture?: boolean;
}
export declare const CursorPosition: (props: PropTypes) => JSX.Element;
//# sourceMappingURL=CursorPosition.d.ts.map