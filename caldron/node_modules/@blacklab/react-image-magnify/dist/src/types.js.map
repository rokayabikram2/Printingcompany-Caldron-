{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n    ComponentType,\n    CSSProperties,\n    DetailedHTMLProps,\n    ForwardRefExoticComponent,\n    HTMLProps,\n    ImgHTMLAttributes,\n    TouchEvent as ReactTouchEvent,\n} from 'react';\nimport type {\n    Modifier,\n    Options,\n    Placement,\n} from '@popperjs/core';\n\nexport type Interactions = {\n    touch: 'touch';\n    tap: 'tap';\n    doubleTap: 'double_tap';\n    press: 'press';\n    click: 'click';\n    hover: 'hover';\n}\n\nexport type MagnifiedImagePosition = Placement | 'over';\n\nexport type ActivationChangeEvent = {\n    isActive: boolean;\n};\n\nexport type OnIsActiveChangedHandler = (event: ActivationChangeEvent) => void;\n\nexport type TimerHandle = {\n    name: string;\n    id: number | NodeJS.Timeout;\n};\n\nexport type DetectedInputType = {\n    isMouseDetected: boolean;\n    isTouchDetected: boolean;\n};\n\nexport type Point = {\n    x: number;\n    y: number;\n};\n\nexport type PositionChangeEvent = {\n    isPositionOutside: boolean;\n    position: Point;\n};\n\nexport type TouchEvent = {\n    e: ReactTouchEvent;\n    position: Point;\n};\n\nexport type InputType = {\n    mouse: 'mouse';\n    touch: 'touch';\n};\n\nexport type ContainerDimensions = {\n    height: number;\n    width: number;\n};\n\nexport type MagnifiedImageProps = DetailedHTMLProps<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement> & {\n    height: number;\n    width: number;\n};\n\nexport type ImageProps = Omit<DetailedHTMLProps<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, 'height' | 'width' | 'onLoad'> & {\n    height?: string | number;\n    width?: string | number;\n    onLoad?: (e: Event) => void;\n}\n\nexport interface LensProps extends HTMLProps<HTMLDivElement> {\n    cursorOffset: Point;\n    fadeDurationInMs?: number;\n    isActive?: boolean;\n    isPositionOutside?: boolean;\n    position: Point;\n}\n\nexport interface HintProps {\n    isMouseDetected?: boolean;\n    isTouchDetected?: boolean;\n    hintTextMouse: string;\n    hintTextTouch: string;\n    style?: CSSProperties | null;\n}\n\nexport type PortalProps = Omit<Partial<Options>, 'modifiers' | 'placement'> & {\n    className?: string;\n    id?: string;\n    style?: CSSProperties;\n    placement?: MagnifiedImagePosition;\n    dataTestId?: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    modifiers?: Modifier<any, any>[];\n    horizontalOffset?: number;\n    verticalOffset?: number;\n};\n\nexport interface MagnifyContainerProps extends Omit<HTMLProps<HTMLDivElement>, 'height' | 'width'> {\n    scale?: number;\n    height?: number;\n    width?: number;\n}\n\nexport type ChildProps = {\n    isActive: boolean;\n    isPositionOutside: boolean;\n    elementDimensions: ContainerDimensions;\n    position: Point;\n};\n\nexport interface CursorPositionProps extends HTMLProps<HTMLDivElement> {\n    activationInteractionMouse: Interactions['click'] | Interactions['hover'];\n    activationInteractionTouch: Interactions['press'] | Interactions['tap'] | Interactions['touch'];\n    children: (props: ChildProps) => JSX.Element;\n    hoverDelayInMs?: number;\n    hoverOffDelayInMs?: number;\n    isEnabled?: boolean;\n    onActivationChanged?: (event: ActivationChangeEvent) => void;\n    onDetectedEnvironmentChanged?: (detectedInputType: DetectedInputType) => void;\n    onPositionChanged?: (event: PositionChangeEvent) => void;\n    pressDurationInMs?: number;\n    pressMoveThreshold?: number;\n    shouldStopTouchMovePropagation?: boolean;\n    tabIndex?: number;\n    tapDurationInMs?: number;\n    tapMoveThreshold?: number;\n}\n\nexport interface ReactImageMagnifyProps extends Omit<\nCursorPositionProps,\n'activationInteractionMouse' | 'activationInteractionTouch' | 'children'\n> {\n    activationInteractionHint?: Interactions['click'] | Interactions['hover'];\n    activationInteractionMouse?: Interactions['click'] | Interactions['hover'];\n    activationInteractionTouch?: Interactions['press'] | Interactions['tap'] | Interactions['touch'];\n    fadeDurationInMs?: number;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    hintComponent?: ComponentType<HintProps & any>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    hintProps?: HintProps & any;\n    hoverDelayInMs?: number;\n    hoverOffDelayInMs?: number;\n    imageComponent?: ComponentType<HTMLProps<HTMLImageElement>>;\n    imageProps: ImageProps;\n    lensComponent?: ForwardRefExoticComponent<LensProps>;\n    lensProps?: LensProps;\n    magnifyContainerProps?: MagnifyContainerProps;\n    magnifiedImageComponent?: ComponentType<HTMLProps<HTMLImageElement>>;\n    magnifiedImageProps: MagnifiedImageProps;\n    pressDuration?: number;\n    pressMoveThreshold?: number;\n    portalProps?: PortalProps;\n    shouldHideHintAfterFirstActivation?: boolean;\n    shouldUsePositiveSpaceLens?: boolean;\n}\n"]}