"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MagnifyContainer = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const imageCoordinates_1 = require("./lib/imageCoordinates");
const utils_1 = require("./utils");
const styles_1 = require("./lib/styles");
const MagnifyContainer = (props) => {
    const { containerDimensions, cursorOffset, fadeDurationInMs = 0, imageComponent: ImageComponent = 'img', imageProps, isActive, isLazyLoaded = true, inPlaceMode, isPortalRendered, isPositionOutside, position, sourceImageDimensions, style } = props, rest = __rest(props, ["containerDimensions", "cursorOffset", "fadeDurationInMs", "imageComponent", "imageProps", "isActive", "isLazyLoaded", "inPlaceMode", "isPortalRendered", "isPositionOutside", "position", "sourceImageDimensions", "style"]);
    const timersRef = (0, react_1.useRef)([]);
    const [isTransitionEntering, setIsTransitionEntering] = (0, react_1.useState)(false);
    const [isTransitionActive, setIsTransitionActive] = (0, react_1.useState)(false);
    const [isTransitionLeaving, setIsTransitionLeaving] = (0, react_1.useState)(false);
    const [, setIsTransitionDone] = (0, react_1.useState)(false);
    const isVisible = !isLazyLoaded || (isLazyLoaded && (isTransitionEntering || isTransitionActive || isTransitionLeaving));
    const imageCoordinates = inPlaceMode
        ? (0, imageCoordinates_1.getInPlaceMagnifiedImageCoordinates)(containerDimensions, imageProps, position)
        : (0, imageCoordinates_1.getLensModeMagnifiedImageCoordinates)(containerDimensions, cursorOffset, imageProps, position, sourceImageDimensions);
    (0, react_1.useEffect)(() => () => {
        var _a;
        return (_a = timersRef.current) === null || _a === void 0 ? void 0 : _a.forEach((timerId) => {
            clearTimeout(timerId);
        });
    }, []);
    (0, react_1.useEffect)(() => {
        if (isActive && !isPositionOutside) {
            setIsTransitionDone(false);
            setIsTransitionEntering(true);
            timersRef.current.push(window.setTimeout(() => {
                setIsTransitionEntering(false);
                setIsTransitionActive(true);
            }, 0));
        }
        else {
            setIsTransitionLeaving(true);
            setIsTransitionActive(false);
            timersRef.current.push(window.setTimeout(() => {
                setIsTransitionDone(true);
                setIsTransitionLeaving(false);
            }, fadeDurationInMs));
        }
    }, [fadeDurationInMs, isActive, isPositionOutside]);
    const enlargedImageStyle = (0, react_1.useMemo)(() => (0, styles_1.getMagnifiedImageStyle)(imageProps), [imageProps]);
    const computedContainerStyle = Object.assign(Object.assign({ overflow: 'hidden' }, (0, styles_1.getMagnifyContainerStyle)(containerDimensions, style, fadeDurationInMs)), (0, styles_1.getTransitionActiveStyle)(isTransitionActive));
    const computedImageStyle = Object.assign(Object.assign({}, enlargedImageStyle), (0, styles_1.getMagnifiedImageTranslationStyle)(imageCoordinates));
    return isVisible ? ((0, jsx_runtime_1.jsx)("div", Object.assign({}, rest, { style: computedContainerStyle }, { children: (0, jsx_runtime_1.jsx)(ImageComponent, Object.assign({}, imageProps, { alt: imageProps.alt || '', style: computedImageStyle, onError: imageProps.onError || utils_1.noop, onLoad: imageProps.onLoad || utils_1.noop })) }))) : null;
};
exports.MagnifyContainer = MagnifyContainer;
//# sourceMappingURL=MaginfyContainer.js.map