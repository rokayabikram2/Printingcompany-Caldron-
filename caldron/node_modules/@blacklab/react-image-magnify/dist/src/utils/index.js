"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setSmallImageDimensionState = exports.resolveSmallImage = exports.imageToStrictDimensions = exports.capitalize = exports.styleToCssText = exports.isFluid = exports.isFluidDimension = exports.noop = void 0;
// eslint-disable-next-line prefer-regex-literals
const fluidCheckRegexp = new RegExp(/(%|vh|vw|vmin|vmax|fit-content|max-content|min-content|auto|stretch|available)$/, 'gi');
function noop() {
    // noop
}
exports.noop = noop;
function isFluidDimension(value) {
    let result = typeof value !== 'number';
    result = result && value !== undefined && fluidCheckRegexp.test(value);
    fluidCheckRegexp.lastIndex = 0;
    return result;
}
exports.isFluidDimension = isFluidDimension;
function isFluid(smallImage) {
    const result = isFluidDimension(smallImage.height) && isFluidDimension(smallImage.width);
    return (smallImage.height === undefined || smallImage.width === undefined) || result;
}
exports.isFluid = isFluid;
function styleToCssText(style) {
    return Object.entries(style).map(([k, v]) => `${k.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`)}:${v}`).join(';');
}
exports.styleToCssText = styleToCssText;
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
exports.capitalize = capitalize;
function imageToStrictDimensions(imageProps, ref) {
    if (typeof imageProps.height === 'number' && typeof imageProps.width === 'number') {
        return {
            height: imageProps.height,
            width: imageProps.width,
        };
    }
    if (!(ref === null || ref === void 0 ? void 0 : ref.current)) {
        return {
            height: 0,
            width: 0,
        };
    }
    return {
        height: ref.current.offsetHeight,
        width: ref.current.offsetWidth,
    };
}
exports.imageToStrictDimensions = imageToStrictDimensions;
function resolveSmallImage(smallImageProp, smallImageHeight, smallImageWidth) {
    const smallImage = Object.assign(Object.assign({}, smallImageProp), { height: smallImageHeight || smallImageProp.height || '100%', width: smallImageWidth || smallImageProp.width || '100%' });
    if (!smallImage.onLoad) {
        smallImage.onLoad = noop;
    }
    return smallImage;
}
exports.resolveSmallImage = resolveSmallImage;
function setSmallImageDimensionState(img, setSmallImage, smallImageProp) {
    if (img) {
        const { naturalHeight, naturalWidth, offsetHeight, offsetWidth, } = img;
        const newSmallImage = resolveSmallImage(smallImageProp, isFluidDimension(smallImageProp.height) ? smallImageProp.height : offsetHeight || naturalHeight, isFluidDimension(smallImageProp.width) ? smallImageProp.width : offsetWidth || naturalWidth);
        setSmallImage(newSmallImage);
    }
}
exports.setSmallImageDimensionState = setSmallImageDimensionState;
//# sourceMappingURL=index.js.map